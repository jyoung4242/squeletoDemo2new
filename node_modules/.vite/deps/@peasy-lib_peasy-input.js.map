{
  "version": 3,
  "sources": ["../../@peasy-lib/peasy-input/src/keyboard-mapping.ts", "../../@peasy-lib/peasy-input/src/keyboard.ts", "../../@peasy-lib/peasy-input/src/mouse-mapping.ts", "../../@peasy-lib/peasy-input/src/mouse.ts", "../../@peasy-lib/peasy-input/src/input.ts"],
  "sourcesContent": ["import { IKeyMapping, Keyboard, KeyCallback, KeyEffectMode, KeymapMode } from \"./keyboard\";\n\nexport class KeyboardMapping {\n  public constructor(\n    public mappings: string | string[] | Record<string, IKeyMapping>,\n    public callback: KeyCallback | undefined,\n    public effectMode: KeyEffectMode,\n    public keymapMode: KeymapMode,\n  ) {\n    if (typeof this.mappings === 'string') {\n      this.mappings = [this.mappings];\n    }\n    if (Array.isArray(this.mappings)) {\n      this.mappings = [...this.mappings].reduce((mappings, value) => {\n        (mappings as any)[value] = value;\n        return mappings;\n      }, {});\n    }\n    for (const key in this.mappings) {\n      const action = this.mappings[key];\n      if (typeof action === 'string') {\n        this.mappings[key] = {\n          action: action,\n          repeat: true,\n        };\n      }\n      this.mappings[key].mapping = this;\n    }\n  }\n\n  public maps(keys: string): IKeyMapping | undefined {\n    return (this.mappings as any)[keys];\n  }\n\n  public unmap(): void {\n    Keyboard.unmap(this);\n  }\n\n  // public addMapping(keys: string | string[], callback: KeyCallback) {\n  //   if (!Array.isArray(keys)) {\n  //     keys = [keys];\n  //   }\n  //   keys.forEach(key => this.mappings.set(key, callback));\n  // }\n  // public removeMapping(key: string) {\n  //   this.mappings.delete(key);\n  // }\n}\n", "import { Input } from \"./input\";\nimport { KeyboardMapping } from \"./keyboard-mapping\";\n\nexport type KeyCallback = (key: string, pressed: boolean, deltaTime: number) => void;\nexport type KeymapMode = 'add' | 'replace';\nexport type KeyEffectMode = 'instant' | 'interval';\n\nexport interface IKeyMapping {\n  action: string;\n  repeat: boolean;\n  mapping?: KeyboardMapping;\n}\n// TODO: Add support for multiple keys for one action\nexport class Keyboard {\n  private static element: HTMLElement | null;\n  private static mappings: KeyboardMapping[] = [];\n  // private static mappings: Map<string, KeyCallback> = new Map();\n  private static readonly pressed: Map<string, { keymap: IKeyMapping, repeat: number, done: boolean, doneIs: boolean }> = new Map();\n  private static lastPressed: string[] = [];\n\n  public static initialize(element: HTMLElement) {\n    this.element = element;\n    this.element.addEventListener('keydown', this.keyChange);\n    this.element.addEventListener('keyup', this.keyChange);\n    return this;\n  }\n\n  public static terminate() {\n    this.element?.removeEventListener('keydown', this.keyChange);\n    this.element?.removeEventListener('keyup', this.keyChange);\n    this.element = null;\n  }\n\n  public static map(mappings: string | string[] | Record<string, IKeyMapping>, callback?: KeyCallback, effectMode: KeyEffectMode = 'interval', keymapMode: KeymapMode = 'add'): KeyboardMapping {\n    const mapping = new KeyboardMapping(mappings, callback, effectMode, keymapMode);\n    this.mappings.unshift(mapping);\n    return mapping;\n  }\n  public static unmap(mapping: KeyboardMapping): void {\n    this.mappings = this.mappings.filter(m => m !== mapping);\n    for (const key of this.pressed.keys()) {\n      if (this.pressed.get(key)?.keymap.mapping === mapping) {\n        this.pressed.delete(key);\n      }\n    }\n    this.lastPressed = [...this.pressed.keys()];\n  }\n\n  public static keyChange = (event: KeyboardEvent): void => {\n    let keys = event.key;\n    if (['Control', 'Alt', 'Shift'].includes(keys)) {\n      if (event.type === 'keydown') {\n        for (const pressed of this.pressed.keys()) {\n          const pressedKeys = pressed.split('+');\n          if (pressedKeys.includes(keys)) {\n            continue;\n          }\n          let modifiedPressed = pressedKeys.pop();\n          for (const modifier of ['Shift', 'Alt', 'Control']) {\n            if (keys === modifier || pressedKeys.includes(modifier)) {\n              modifiedPressed = `${modifier}+${modifiedPressed}`;\n            }\n          }\n\n          Keyboard.resolve(pressed, 'keyup');\n          Keyboard.resolve(modifiedPressed as string, 'keydown');\n        }\n      } else if (event.type === 'keyup') {\n        for (const pressed of this.pressed.keys()) {\n          const pressedKeys = pressed.split('+');\n          if (!pressedKeys.includes(keys)) {\n            continue;\n          }\n          const modifiedPressed = pressedKeys.filter(key => key !== keys).join('+');\n\n          Keyboard.resolve(pressed, 'keyup');\n          Keyboard.resolve(modifiedPressed, 'keydown');\n        }\n      }\n    } else {\n      if (event.shiftKey) {\n        keys = `Shift+${keys}`;\n      }\n      if (event.altKey) {\n        keys = `Alt+${keys}`;\n      }\n      if (event.ctrlKey) {\n        keys = `Control+${keys}`;\n      }\n      Keyboard.resolve(keys, event.type);\n    }\n  };\n\n  public static resolve(keys: string, eventType: string) {\n    const mapped = this.mapped(keys);\n    if (mapped == null) {\n      return;\n    }\n\n    if (mapped.mapping?.effectMode === 'instant') {\n      mapped.mapping.callback?.(mapped.action, eventType === 'keydown', 0);\n      return;\n    }\n\n    if (eventType === 'keydown') {\n      if (!this.pressed.has(keys)) {\n        this.pressed.set(keys, { keymap: mapped, repeat: 0, done: false, doneIs: false });\n      }\n    } else if (eventType === 'keyup') {\n      this.pressed.delete(keys);\n    }\n  }\n\n  public static update(deltaTime: number) {\n    this.pressed.forEach((mapped, key) => {\n      if (mapped.repeat === 0 || (mapped.keymap.repeat && mapped.repeat <= 0)) {\n        mapped.keymap.mapping?.callback?.(mapped.keymap.action, true, deltaTime);\n        mapped.repeat += Input.rps;\n      } else {\n        // console.log('NO REPEAT', mapped.repeat);\n        if (!mapped.keymap.repeat) {\n          if (!mapped.done) {\n            // mapped.keymap.mapping.callback(mapped.keymap.action, false, deltaTime);\n            mapped.done = true;\n          }\n        } else {\n          mapped.repeat -= deltaTime * 1000;\n        }\n      }\n    });\n    this.lastPressed.forEach(keys => {\n      if (!this.pressed.has(keys)) {\n        const mapped = this.mapped(keys);\n        mapped?.mapping!.callback?.(mapped.action, false, deltaTime);\n      }\n    });\n    this.lastPressed = [...this.pressed.keys()];\n  }\n\n  public static mapped(keys: string): IKeyMapping | undefined {\n    let mapped;\n    for (const mapping of this.mappings) {\n      mapped = mapping.maps(keys);\n      if (mapped != null || mapping.keymapMode === 'replace') {\n        break;\n      }\n    }\n    return mapped;\n  }\n\n  public static is(action: string): boolean {\n    for (const pressed of this.pressed.values()) {\n      if (pressed.keymap.action !== action) {\n        continue;\n      }\n      if (pressed.repeat === 0 || (pressed.keymap.repeat && pressed.repeat <= 0)) {\n        return true;\n      } else {\n        if (!pressed.keymap.repeat && !pressed.doneIs) {\n          pressed.doneIs = true;\n          return true;\n        }\n      }\n      return false;\n    }\n    return false;\n  }\n}\n", "import { Mouse } from \"./mouse\";\r\n\r\nexport class MouseMapping {\r\n  public constructor(\r\n  ) {\r\n  }\r\n  public unmap(): void {\r\n    Mouse.unmap(this);\r\n  }\r\n}\r\n", "import { MouseMapping } from \"./mouse-mapping\";\r\n\r\nexport type MouseCallback = (key: string, pressed: boolean, deltaTime: number) => void;\r\nexport type MouseEffectMode = 'instant' | 'interval';\r\n\r\nexport class Mouse {\r\n  private static mappings: MouseMapping[] = [];\r\n\r\n  public static initialize() {\r\n    return this;\r\n  }\r\n\r\n  public static terminate() { }\r\n\r\n  public static map(): MouseMapping {\r\n    const mapping = new MouseMapping();\r\n    this.mappings.unshift(mapping);\r\n    return mapping;\r\n  }\r\n  public static unmap(mapping: MouseMapping): void {\r\n    this.mappings = this.mappings.filter(m => m !== mapping);\r\n  }\r\n\r\n  public static update(deltaTime: number) { }\r\n\r\n  public static is(action: string): boolean {\r\n    return false;\r\n  }\r\n}\r\n", "import { IKeyMapping, Keyboard, KeyCallback, KeyEffectMode, KeymapMode } from \"./keyboard\";\nimport { KeyboardMapping } from \"./keyboard-mapping\";\nimport { Mouse } from \"./mouse\";\nimport { MouseMapping } from \"./mouse-mapping\";\n\nexport type InputCallback = KeyCallback;\nexport type InputEffectMode = KeyEffectMode;\n\nexport class Input {\n  private static initialized = false;\n  public static rps: number;\n\n  public static initialize(rps: number, rAF = true, element = document.body) {\n    Input.initialized = true;\n    this.rps = rps;\n    Keyboard.initialize(element);\n    Mouse.initialize();\n\n    if (rAF === true) {\n      let last: number;\n      const start = (now: number) => {\n        last = now;\n        requestAnimationFrame(tick);\n      };\n      const tick = (now: number) => {\n        const deltaTime = (now - last) / 1000;\n        last = now;\n        Input.update(deltaTime);\n        requestAnimationFrame(tick);\n      };\n      requestAnimationFrame(start);\n      return;\n    }\n    return this;\n  }\n\n  public static terminate() {\n    Keyboard.terminate();\n    Mouse.terminate();\n  }\n\n  public static map(mappings: any, callback?: InputCallback, effectMode: InputEffectMode = 'interval', keymapMode: KeymapMode = 'add'): KeyboardMapping {\n    if (!Input.initialized) {\n      Input.initialize(60);\n    }\n    return Keyboard.map(mappings, callback, effectMode, keymapMode);\n  }\n  public static unmap(mapping: KeyboardMapping | MouseMapping): void {\n    if (mapping instanceof KeyboardMapping) {\n      Keyboard.unmap(mapping);\n    } else {\n      Mouse.unmap(mapping);\n    }\n  }\n\n  public static update(deltaTime: number) {\n    Keyboard.update(deltaTime);\n    Mouse.update(deltaTime);\n  }\n\n  public static is(action: string): boolean {\n    if (!Input.initialized) {\n      Input.initialize(60);\n    }\n    return Keyboard.is(action) || Mouse.is(action);\n  }\n}\n"],
  "mappings": "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",
  "names": ["mappings"]
}
